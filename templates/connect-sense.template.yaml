AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: Reference deployment for ingestion of data from ConnectSense IoT devices. (qs-1rd76h0od)
Metadata:
  QuickStartDocumentation:
    EntrypointName: "Parameters for deploying this Quick Start"
  cfn-lint:
    config:
      ignore_checks:
        - E9101
      # ignore_reason:
      #   - 'execute' is part of the API GW
  About:
    Description: >
      This template is provided by Grid Connect and Trek10 in collaboration with AWS. It creates a
      serverless IoT backend for developers who want to build applications for the ConnectSense Smart Power Cord.
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: AWS IoT Analytics configuration
        Parameters:
          - DataRetentionDays
      - Label:
          default: Amazon API Gateway configuration
        Parameters:
          - ApiGatewayUsagePlanLimit
      - Label:
          default: AWS Quick Start configuration
        Parameters:
          - QSS3BucketName
          - QSS3KeyPrefix
    ParameterLabels:
      DataRetentionDays:
        default: Data-retention days
      ApiGatewayUsagePlanLimit:
        default: API Gateway usage-plan limit
      QSS3BucketName:
        default: Quick Start S3 bucket name
      QSS3KeyPrefix:
        default: Quick Start S3 key prefix

Parameters:
  QSS3BucketName:
    AllowedPattern: ^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$
    ConstraintDescription: Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).
    Default: aws-quickstart
    Description: Name of the S3 bucket for your copy of the Quick Start assets.
      Keep the default name unless you are customizing the template.
      Changing the name updates code references to point to a new Quick
      Start location. This name can include numbers, lowercase letters,
      uppercase letters, and hyphens, but do not start or end with a hyphen (-).
      See https://aws-quickstart.github.io/option1.html.
    Type: String
  QSS3KeyPrefix:
    AllowedPattern: ^([0-9a-zA-Z-.]+/)*$
    ConstraintDescription: Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), dots (.) and forward slash (/). The prefix should end with a forward slash (/).
    Default: quickstart-grid-connect-connectsense/
    Description: S3 key prefix that is used to simulate a directory for your copy of the
      Quick Start assets. Keep the default prefix unless you are customizing
      the template. Changing this prefix updates code references to point to
      a new Quick Start location. This prefix can include numbers, lowercase
      letters, uppercase letters, hyphens (-), and forward slashes (/). End with a forward slash.
      See https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingMetadata.html
      and https://aws-quickstart.github.io/option1.html.
    Type: String
  QSS3BucketRegion:
    Default: 'us-east-1'
    Description: The AWS Region where the Quick Start S3 bucket (QSS3BucketName) is hosted. When using your own bucket, you must specify this value.
    Type: String
  DataRetentionDays:
    Description: Number of days that the system retains data from ConnectSense devices.
    Default: 30
    Type: Number
    MinValue: 1
    MaxValue: 365
  ApiGatewayUsagePlanLimit:
    Description: Number of requests to the API Gateway allowed per day.
    Default: 10
    Type: Number
    MinValue: 1

  DeploySitewiseML:
    Description: If True, will deploy the sitewise ML Stack
    Type: String
    Default: 'false'
    AllowedValues: [ 'true', 'false']

Conditions:
  UsingDefaultBucket: !Equals [!Ref QSS3BucketName, 'aws-quickstart']
  ShouldCreateSitewiseML:
    !Equals [ true, !Ref DeploySitewiseML ]

Resources:

  SitewiseMLDeployment:
    Type: AWS::CloudFormation::Stack
    Condition: ShouldCreateSitewiseML
    Properties:
      Parameters:
        QSS3BucketName: !Ref QSS3BucketName
        QSS3KeyPrefix: !Ref QSS3KeyPrefix
        SNSAlertTopicName: !GetAtt AlertsTopic.TopicName
      TemplateURL: !Sub
        - https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}templates/sitewise-ml.template.yaml
        - S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref 'QSS3BucketName']
          S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref 'QSS3BucketRegion']



  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: dev
      Auth:
        ApiKeyRequired: true

  ApiGatewayUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    Properties:
      ApiStages:
        - ApiId: !Ref ApiGatewayApi
          Stage: !Ref ApiGatewayApi.Stage
      Description: QuickStart device usage plan.
      Quota:
        Limit: !Ref ApiGatewayUsagePlanLimit
        Period: DAY
      UsagePlanName: QuickstartUsagePlan

  ApiKey:
    Type: "AWS::ApiGateway::ApiKey"
    Properties:
      Description: Quickstart API key
      Enabled: true
  ApiGatewayUsagePlanKey:
    Type: AWS::ApiGateway::UsagePlanKey
    Properties:
      KeyId: !Ref ApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref ApiGatewayUsagePlan

  ### IOT RESOURCES ###
  IoTAnalyticsChannel:
    Type: AWS::IoTAnalytics::Channel
    Properties:
      # ChannelName: String
      # ChannelStorage:
      RetentionPeriod:
        NumberOfDays: !Ref DataRetentionDays
        Unlimited: false

  IoTAnalyticsDatastore:
    Type: "AWS::IoTAnalytics::Datastore"
    Properties:
      RetentionPeriod:
        NumberOfDays: !Ref DataRetentionDays
        Unlimited: false

  IoTAnalyticsPipeline:
    Type: "AWS::IoTAnalytics::Pipeline"
    Properties:
      PipelineActivities:
        - Channel:
            Name: "ChannelActivity"
            ChannelName: !Ref IoTAnalyticsChannel
            Next: "DatastoreActivity"
          Datastore:
            Name: "DatastoreActivity"
            DatastoreName: !Ref IoTAnalyticsDatastore

  IoTIngestionRule:
    Type: AWS::IoT::TopicRule
    Properties:
      TopicRulePayload:
        RuleDisabled: False
        Actions:
          - IotAnalytics:
              ChannelName: !Ref IoTAnalyticsChannel
              RoleArn: !GetAtt IoTAnalyticsRole.Arn
        AwsIotSqlVersion: "2016-03-23"
        Sql: >-
          Select *, timestamp() AS timestamp, topic(2) AS thing_name, parse_time("yyyy-MM-dd'T'HH:mm:ss", timestamp()) as datetime FROM 'iot8020/+/metrics'
        Description: "Shuttles ingestion to the IOTAnalyticsChannel"

  IoTAnalyticsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "iot.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: IoTAnalyticsPublish
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: IoTBatchPutMessage
                Effect: Allow
                Action:
                  - iotanalytics:BatchPutMessage
                  # - s3:PutObject
                Resource: !Sub "arn:${AWS::Partition}:iotanalytics:${AWS::Region}:${AWS::AccountId}:*"

  IoTAnalyticsDataset:
    Type: "AWS::IoTAnalytics::Dataset"
    Properties:
      DatasetName: "ConnectSenseQuickstartDataset"
      Actions:
        - ActionName: "SqlAction"
          QueryAction:
            SqlQuery: !Sub "select * from ${IoTAnalyticsDatastore}"
      Triggers:
        - Schedule:
            ScheduleExpression: "rate(5 minutes)"

  DevKitDevicePolicy:
    Type: AWS::IoT::Policy
    Properties:
      PolicyName: !Sub ${AWS::StackName}-device-policy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: iot:Connect
            Resource:
              - Fn::Join:
                  - ":"
                  - - arn:aws:iot
                    - Ref: AWS::Region
                    - Ref: AWS::AccountId
                    - client/${iot:ClientId}
          - Effect: Allow
            Action:
              - iot:Publish
              - iot:Receive
            Resource:
              - Fn::Join:
                  - ":"
                  - - arn:aws:iot
                    - Ref: AWS::Region
                    - Ref: AWS::AccountId
                    - topic/$aws/things/${iot:Connection.Thing.ThingName}/*
              - Fn::Join:
                  - ":"
                  - - arn:aws:iot
                    - Ref: AWS::Region
                    - Ref: AWS::AccountId
                    - topic/$aws/things/${iot:Connection.Thing.ThingName}/shadow/*
              - Fn::Join:
                  - ":"
                  - - arn:aws:iot
                    - Ref: AWS::Region
                    - Ref: AWS::AccountId
                    - topic/iot8020/${iot:Connection.Thing.ThingName}/*
              - Fn::Join:
                  - ":"
                  - - arn:aws:iot
                    - Ref: AWS::Region
                    - Ref: AWS::AccountId
                    - topic/${iot:Connection.Thing.ThingName}/*
          - Effect: Allow
            Action: iot:Subscribe
            Resource:
              - Fn::Join:
                  - ":"
                  - - arn:aws:iot
                    - Ref: AWS::Region
                    - Ref: AWS::AccountId
                    - topicfilter/$aws/things/${iot:Connection.Thing.ThingName}/*
              - Fn::Join:
                  - ":"
                  - - arn:aws:iot
                    - Ref: AWS::Region
                    - Ref: AWS::AccountId
                    - topicfilter/${iot:Connection.Thing.ThingName}/#
              - Fn::Join:
                  - ":"
                  - - arn:aws:iot
                    - Ref: AWS::Region
                    - Ref: AWS::AccountId
                    - topicfilter/$aws/things/${iot:Connection.Thing.ThingName}/shadow/*
              - Fn::Join:
                  - ":"
                  - - arn:aws:iot
                    - Ref: AWS::Region
                    - Ref: AWS::AccountId
                    - topicfilter/iot8020/${iot:Connection.Thing.ThingName}/*
          - Effect: Allow
            Action:
              - iot:UpdateThingShadow
              - iot:GetThingShadow
            Resource:
              - Fn::Join:
                  - ":"
                  - - arn:aws:iot
                    - Ref: AWS::Region
                    - Ref: AWS::AccountId
                    - topic/$aws/things/${iot:Connection.Thing.ThingName}/shadow/*

  ### LAMBDA FUNCTION RESOURCES ###
  UploadDeviceManifest:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
        Bucket: !Ref QSS3BucketName
        Key: !Sub ${QSS3KeyPrefix}functions/packages/UploadDeviceManifest/lambda.zip
      Handler: api.upload_manifest
      Role: !GetAtt ProvisionApiLambdaRole.Arn
      Runtime: python3.8
      Timeout: 300
      Environment:
        Variables:
          DEVICE_POLICY: !Sub ${AWS::StackName}-device-policy
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Method: post
            Path: /devices/new
            RestApiId: !Ref ApiGatewayApi

  ProcessAlerts:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
          Bucket: !Ref QSS3BucketName
          Key: !Sub ${QSS3KeyPrefix}functions/packages/ProcessAlerts/lambda.zip
      Handler: alerts.process_alerts
      Role: !GetAtt ProcessAlertsLambdaRole.Arn
      Runtime: python3.8
      Timeout: 300
      Environment:
        Variables:
          TOPIC_ARN: !Ref AlertsTopic
      Events:
        TemperatureExcess:
          Type: IoTRule
          Properties:
            Sql: >-
              Select *, topic(2) AS thing_name FROM 'iot8020/+/metrics' WHERE watts > 5.0

  ### LAMBDA FUNCTION ROLES ###
  ProcessAlertsLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Policies:
        - PolicyName: "process-alerts-policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "sns:Publish"
                Resource: !Ref AlertsTopic

  ProvisionApiLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AWSXrayWriteOnlyAccess"
      Policies:
        - PolicyName: "device-provisioning-api-role"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "iot:AddThingToThingGroup"
                  - "iot:AttachPolicy"
                  - "iot:AttachPrincipalPolicy"
                  - "iot:CreatePolicy"
                  - "iot:CreateThing"
                  - "iot:DescribeCertificate"
                  - "iot:DescribeThing"
                  - "iot:DescribeThingType"
                  - "iot:GetPolicy"
                  - "iot:ListThingGroupsForThing"
                  - "iot:ListTargetsForPolicy"
                  - "iot:DetachPolicy"
                  - "iot:UpdateCertificate"
                  - "iot:DeleteCertificate"
                  - "iot:DeleteThing"
                  - "iot:GetThingShadow"
                Resource: !Sub "arn:${AWS::Partition}:iot:${AWS::Region}:${AWS::AccountId}:*"
              - Effect: "Allow"
                Action:
                  - "iot:AttachThingPrincipal"
                  - "iot:CreateKeysAndCertificate"
                  - "iot:ListPolicies"
                  - "iot:ListThingPrincipals"
                  - "iot:DetachThingPrincipal"
                  - "iot:RegisterThing"
                  - "iot:DescribeEndpoint"
                  - "iot:RegisterCertificateWithoutCA"
                Resource: "*"

  ## SNS TOPIC ##
  AlertsTopic:
    Type: AWS::SNS::Topic

Outputs:
  ApiGatewayURL:
    Description: API URL.
    Value: !Sub https://${ApiGatewayApi}.execute-api.${AWS::Region}.amazonaws.com/dev
  Postdeployment:
    Value: https://fwd.aws/wP8dW
    Description: See the deployment guide for post-deployment steps.
